apply plugin: 'java'

// This project can be compiled/executed against in multiple environments:
//  - Manually downloaded jchem.jar: to compile / execute against a locally available JChem distribution.
//    Location of lib/jchem.jar is passed through property "cxnJchemJar"
//  - ChemAxon public artifact repository (hub.chemaxon.com): credentials specified using properties
//    "cxnHubUser" and "cxnHubPass"
//  - ChemAxon internal build environmentg (Gluon): used internally by developers of ChemAxon.
//    

// ChemAxon internal environment needs buildscript block; in all other configurations this will be ignored =============
buildscript {
    if (!project.hasProperty('cxnJchemJar') && !project.hasProperty('cxnHubUser') && !project.hasProperty('cxnHubPass')) {
        // For CXN internal use only
        // When no further properties are defined, this mode is is selected.
        println ""
        println ""
        println "-------------------------------------------------------------------------------------------"
        println "[buildscript block] ChemAxon internal build environment (Gluon). For details see README.md"
        println ""
        println "For typical usage specify your registered ChemAxon PASS email and HUB API key:"
        println ""
        println "    ./gradlew -PcxnHubUser=<YOUR_PASS_EMAIL> -PcxnHubPass=<YOUR_HUB_API_KEY> ....."
        println ""
        println "Or the location of lib/jchem.jar from a JChem distribution:"
        println ""
        println "    ./gradlew -PcxnJchemJar=<FILE> ....."
        println ""
        println "-------------------------------------------------------------------------------------------"
        println ""

        if (!project.hasProperty('cxnRepository')) {
            println "ERROR: ChemAxon internal build environment (Gluon) is not configured properly. See README.md"
            println "You can compile this project against"
            println ""
            println "  ChemAxon public repository using  -PcxnHubUser=<YOUR_PASS_EMAIL> -PcxnHubPass=<YOUR_HUB_API_KEY>"
            println "  a JChem distribution using        -PcxnJchemJar=<FILE>"
            println ""
            
            ant.fail("Can not resolve dependencies, see README.md and check console output.");
        }

        repositories cxnRepository
        dependencies.classpath "com.chemaxon:gluon-plugins:${cxnGluonVersion}"
    }
}

// End of buildscript block; configure dependencies ====================================================================

if (project.hasProperty('cxnJchemJar')) {
    // Depend only the specified jar file
    // jchem.jar in JChem distribution will refer other jars from its manifest

    println ""
    println ""
    println "-------------------------------------------------------------------------------"
    println "Property \"cxnJchemJar\" is present."
    println ""
    println "Using manually downloaded, locally available JChem distribution in"
    println ""
    println "    ${cxnJchemJar}"
    println ""
    println "-------------------------------------------------------------------------------"
    println ""
    println ""
    println ""
    println ""


    repositories {
        mavenCentral()
    }

    dependencies {
        compile files("${cxnJchemJar}")
        testCompile "junit:junit:4.12"
    }
    
} else if (project.hasProperty('cxnHubUser') || project.hasProperty('cxnHubPass')) {
    // Open source configuration available to ChemAxon public repository (hub.chemaxon.com) users

    println ""
    println ""
    println "-------------------------------------------------------------------------------------------"
    println "Property \"cxnHubUser\" / \"cxnHubPass\" found."
    println "Using ChemAxon public repository \"hub.chemaxon.com\" for accessing ChemAxon proprietary APIs"
    println "-------------------------------------------------------------------------------------------"
    println ""

    if (!project.hasProperty('cxnHubUser') || !project.hasProperty('cxnHubPass')) {
        ant.fail("Both properties \"cxnHubUser\" and \"cxnHubPass\" must be definied for open source configuration.");
    }

    // When using this "Open-source" configuration with ChemAxon public repository "hub.chemaxon.com",
    // the dependencies are referenced using the associated release version.
    if (project.hasProperty('cxnReleaseVersion')) {
        project.cxnDependencyVersion = project.cxnReleaseVersion
    }

    repositories {
        maven {
            url "${cxnHubContextUrl}/libs-release"
            credentials {
                username "${cxnHubUser}"
                password "${cxnHubPass}"
            }
        }
    }

    
    dependencies {
        compile "com.chemaxon:calculations:${cxnHubReleaseVersion}"
        testCompile "junit:junit:4.12"
    }
    

} else {
    
    // Using Gluon based CXN dependency version management, currently intended for ChemAxon internal use only.

    println ""
    println ""
    println "-------------------------------------------------------------------------------------------"
    println "Using Gluon for dependency version management. This is for ChemAxon internal use only."
    println "For details see README.md"
    println "-------------------------------------------------------------------------------------------"
    println ""
    println ""

    apply plugin: 'cxn-gluon'
    apply plugin: 'cxn-java'

    dependencies {
        compile "com.chemaxon:calculations:${cxnGluonDependencyVersion}"
        testCompile "junit:junit:4.12"
    }

}

task runShortestPathsExample(type: JavaExec) {
    group = 'Example execution'
    description = 'Run example code - shortest paths example'

    main = 'example.ShortestPathsExample'

    classpath = sourceSets.main.runtimeClasspath
}